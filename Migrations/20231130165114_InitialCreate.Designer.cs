// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Event_Manager.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20231130165114_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attendee", b =>
                {
                    b.Property<Guid>("AttendeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttendeeID");

                    b.ToTable("Attendees");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<Guid>("EmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HostID")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("LocationAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Pay")
                        .HasColumnType("numeric");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShiftSchedule")
                        .HasColumnType("text");

                    b.HasKey("EmpID");

                    b.HasIndex("HostID");

                    b.HasIndex("LocationAddress");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HostID")
                        .HasColumnType("uuid");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.HasIndex("HostID");

                    b.HasIndex("LocationAddress");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HasSpace", b =>
                {
                    b.Property<int>("RoomID")
                        .HasColumnType("integer");

                    b.Property<int>("TableID")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VendorID")
                        .HasColumnType("uuid");

                    b.HasKey("RoomID", "TableID");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorID");

                    b.ToTable("HasSpace");
                });

            modelBuilder.Entity("Host", b =>
                {
                    b.Property<Guid>("HostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("HostID");

                    b.ToTable("Hosts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Host");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HostedBy", b =>
                {
                    b.Property<Guid>("HostedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostID")
                        .HasColumnType("uuid");

                    b.HasKey("HostedID");

                    b.HasIndex("EventId");

                    b.HasIndex("HostID");

                    b.ToTable("HostedBy");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AttendeeCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RentalFee")
                        .HasColumnType("numeric");

                    b.Property<int>("VendorCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Address");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Presenter", b =>
                {
                    b.Property<int>("PresenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PresenterID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PresenterFee")
                        .HasColumnType("numeric");

                    b.HasKey("PresenterID");

                    b.ToTable("Presenters");
                });

            modelBuilder.Entity("Presents", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("PresenterID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoomID");

                    b.HasIndex("EventId");

                    b.HasIndex("PresenterID");

                    b.ToTable("Presents");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TicketID");

                    b.HasIndex("AttendeeID");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Vendor", b =>
                {
                    b.Property<Guid>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VendorID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Organization", b =>
                {
                    b.HasBaseType("Host");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("text");

                    b.Property<string>("RepresentativePhone")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.HasBaseType("Host");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationAddress");

                    b.Navigation("Host");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("Host", null)
                        .WithMany("Events")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HasSpace", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HostedBy", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Presents", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presenter", "Presenter")
                        .WithMany()
                        .HasForeignKey("PresenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Presenter");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Host", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
